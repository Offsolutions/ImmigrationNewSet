@model ImmigrationNewSetup.Models.studentdetail

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>studentdetail</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.StudentId)
        @Html.HiddenFor(model => model.TrackingID)


        <div class="form-group">
            @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.dob, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.dob, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.dob, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.gender,
                    new SelectList(Enum.GetValues(typeof(ImmigrationNewSetup.Models.gender))),
                    "Select Gender",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fathername, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fathername, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fathername, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.mothername, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.mothername, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.mothername, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.phone2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.phone2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.phone2, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.married, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                Married @Html.RadioButton("married", "Married")
                UnMarried @Html.RadioButton("married", "UnMarried")
                @Html.ValidationMessageFor(model => model.married, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.board, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.board,
                    new SelectList(Enum.GetValues(typeof(ImmigrationNewSetup.Models.board))),
                    "Select board",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.board, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.qualification, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.qualification, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.qualification, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.marks, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.marks, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.marks, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gap, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                Yes @Html.RadioButton("gap", "Yes")
                No @Html.RadioButton("gap", "No")
                @Html.ValidationMessageFor(model => model.gap, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gapdetail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.gapdetail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.gapdetail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.refusal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                Yes @Html.RadioButton("refusal", "Yes")
                No @Html.RadioButton("refusal", "No")
                @Html.ValidationMessageFor(model => model.refusal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.refusaldetail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.refusaldetail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.refusaldetail, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.filetype, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.filetype, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.filetype, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CountryId", (IEnumerable<SelectListItem>)ViewBag.CourseId, "Select Country", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.country, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.intake, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.DropDownListFor(model => model.intake,
                    new SelectList(Enum.GetValues(typeof(ImmigrationNewSetup.Models.intake))),
                    "Select Intake",
                    new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.intake, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-5">
                @Html.EditorFor(model => model.year, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.year, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.itr, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                Yes @Html.RadioButton("itr", "Yes")
                No @Html.RadioButton("itr", "No")
                @Html.ValidationMessageFor(model => model.itr, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.note, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.note, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" style="display:none;">
            @Html.LabelFor(model => model.uid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.uid, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.uid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" style="display:none;">
            @Html.LabelFor(model => model.date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Status)
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-danger" />
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-danger" })
            </div>
        </div>
    </div>
}

<div>

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
